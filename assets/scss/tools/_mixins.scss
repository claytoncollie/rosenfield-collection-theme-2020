// Custom mixins.

// Media Query mixin
//
// @param {String | Boolean} $from (false) - One of $mq-breakpoints
// @param {String | Boolean} $until (false) - One of $mq-breakpoints
// @param {String | Boolean} $and (false) - Additional media query parameters
// @param {String} $media-type ($mq-media-type) - Media type: screen, printâ€¦
// @param {String} $breakpoints ($mq-breakpoints) - Breakpoints map

@mixin mq($from: false,
	$until: false,
	$and: false,
	$media-type: $mq-media-type,
	$breakpoints: $mq-breakpoints) {
	$min-width: 0;
	$max-width: 0;
	$media-query: "";

	// From: this breakpoint (inclusive)
	@if $from {

		@if type-of($from)==number {
			$min-width: $from;
		}

		@else {
			$min-width: mq-get-breakpoint-width($from, $breakpoints);
		}
	}

	// Until: that breakpoint (exclusive)
	@if $until {

		@if type-of($until)==number {
			$max-width: $until;
		}

		@else {
			$max-width: mq-get-breakpoint-width($until, $breakpoints);
		}
	}

	@if $min-width !=0 {
		$media-query: "#{$media-query} and (min-width: #{$min-width})";
	}

	@if $max-width !=0 {
		$media-query: "#{$media-query} and (max-width: #{$max-width})";
	}

	@if $and {
		$media-query: "#{$media-query} and #{$and}";
	}

	// Remove unnecessary media query prefix 'all and '
	@if ($media-type =="all" and $media-query !="") {
		$media-type: "";
		/* stylelint-disable */
		$media-query: str-slice(unquote($media-query), 6);
		/* stylelint-enable */
	}

	@media #{$media-type + $media-query} {

		@content;
	}
}


// Hover focus mixin
@mixin hover-focus {

	&:hover,
	&:focus,
	&:active {

		@content;
	}
}

// Overlay mixin
@mixin overlay {
	overflow: hidden;
	position: relative;

	&::before {
		display: block;
		background-color: rgba($gray-100, 0.9);
		;
		content: "";

		@include position(absolute, 0 0 0 0);
	}
}
